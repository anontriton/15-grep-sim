#!/usr/bin/env python3

"""
This script allows students to compare their ./gerp performance with that of ./the_gerp.

It compares two metrics: runtime and peak memory usage. 
- The runtime is the combined user and kernel CPU time (%S, %U in /usr/bin/time).
- The memory usage is the virtual memory usage (VIRT in top). This is done to better
approximate the RLIMIT_DATA resource used by the autograder when restricting executables'
memory usage. The maximum usage is determined as the maximum of the virtual memory usage
pinged every MONITORING_FREQUENCY_SEC seconds.

This script needs to have 755 permissions.

Some useful links related to this: 
https://man7.org/linux/man-pages/man1/time.1.html
https://www.baeldung.com/linux/resident-set-vs-virtual-memory-size
https://man7.org/linux/man-pages/man2/getrlimit.2.html
https://psutil.readthedocs.io/en/latest/#psutil.Process.memory_info

Chami Lamelas
Spring 2023
"""

import subprocess as sp
import psutil as ps
import threading as th
import argparse as ap
from pathlib import Path
from math import ceil
from datetime import timedelta
from getpass import getuser
import time
import sys
import os

DESCRIPTION = "This program allows you to compare your gerp implementation with the reference.\nYou should run this program in your submission directory.\nThis program will not display your stdout, stderr -- make sure your program works on some simple cases before running."
"""Script help description"""

EPILOG = "Example usage: gerp_perf proj4-test-dirs/tinyData output.txt"
"""Script help epilog"""

BYTES_IN_GB = 1024 ** 3
"""Bytes in a GB"""

TEMP_TIME_FILE = ".gerp_perf.time.tmp"
"""Where /usr/bin/time results go to -- this is deleted by the script always"""

NONITORING_FREQUENCY_SEC = 0.1
"""Frequency we ping the executable"""


class VirtualMemoryMonitor(th.Thread):
    """
    The way we monitory virtual memory is by identifying the process running
    a particular executable and then continuously pinging the virtual memory
    of that process until either stop_monitoring() is called or a process
    running the said executable no longer exists.
    """

    def __init__(self, monitoring_frequency, executable_name):
        """Initialize monitor with monitoring frequency and executable to monitor"""

        super().__init__(target=self.__vm_monitor)
        self.__monitor_freq = monitoring_frequency
        self.__exec_name = executable_name
        self.__log = list()
        self.__done = False
        self.__user = getuser()

    def max_vm_usage(self):
        """Gets maximum of the logged memory usage in GB"""

        return round(max(self.__log) / BYTES_IN_GB, 4) if len(self.__log) > 0 else 0

    def stop_monitoring(self):
        self.__done = True

    def __vm_monitor(self):
        """
        Function that runs in the enclosed Thread

        Note the thread will block until such an executable starts or stop_monitoring()
        is called and only will terminate after when stop_monitoring() is called or
        process with executable name no longer exists.
        """

        exec_process = None
        # Until stop_monitoring() or a process with that executable is identified
        # keep looking for one
        while not self.__done and exec_process is None:

            # So psutil shows other user's programs, so you could find another student
            # running gerp and try to access their info. psutil doesn't really give
            # a useful error on this (it just is a generic PermissionError effectively)
            # patch is to make sure that the process user is the same as the user
            # running this script
            exec_process = next(
                (p for p in ps.process_iter() if p.name() == self.__exec_name and p.username() == self.__user), None)
        while not self.__done:
            time.sleep(self.__monitor_freq)
            # This handles possibility that process finishes during the sleep
            try:
                self.__log.append(exec_process.memory_full_info().vms)
            except ps.NoSuchProcess:
                pass


def prettytime(secs):
    return str(timedelta(seconds=ceil(secs)))


def inform(msg):
    print(f'[gerp_perf] {msg}', file=sys.stderr)


def get_cmdline_args():
    parser = ap.ArgumentParser(
        description=DESCRIPTION, formatter_class=ap.RawTextHelpFormatter, epilog=EPILOG)
    parser.add_argument('directory_to_index', type=str,
                        help='Directory to index (first command line argument to ./gerp).')
    parser.add_argument('output_filepath', type=str,
                        help='Output file path (second command line argument to ./gerp).')
    args = parser.parse_args()
    return args.directory_to_index, args.output_filepath


def check_and_remove(filepath):
    if os.path.isfile(filepath):
        os.remove(filepath)


def check_executable(exec):
    assert os.path.isfile(exec) and os.access(
        exec, os.X_OK), f'unable to find an executable called \"{exec}\", are you in your submission directory?'


def check_and_make(exec):
    inform('attempting to compile your program')
    if os.path.isfile('Makefile'):
        check_and_remove(exec)
        sp.run(['make', exec])
    else:
        inform(f'warning: not able to update {exec}')


def check_cwd():
    """
    Tries to make gerp, then makes sure executables gerp and the_gerp exist. 
    The latter two operations must succeed.
    """
    check_and_make('gerp')
    check_executable('gerp')
    check_executable('the_gerp')


def parse_runtime():
    """
    Gets and sums the user and kernel time, if the student's program
    crashes, this file can be formatted incorrectly so we handle that
    """

    try:
        times = Path(TEMP_TIME_FILE).read_text().split(" ")
        return float(times[0]) + float(times[1])
    except ValueError:
        raise AssertionError(
            "unable to properly determine runtime, your program may have crashed")


def run_and_time(exec, args, stdin):
    """
    Runs executable with command line arguments and standard in as well as times its
    CPU and kernel time. The output is captured and returned in a CompletedProcess
    """

    return sp.run(["/usr/bin/time", "-f", "%S %U", "-o", TEMP_TIME_FILE, f"./{exec}"] + list(args), input=stdin, text=True, capture_output=True)


def run_and_monitor(executable_name, args, stdin):
    monitor = VirtualMemoryMonitor(NONITORING_FREQUENCY_SEC, executable_name)
    try:
        # Begin monitoring VM -- look for gerp
        monitor.start()
        # Here we drop the students stdout and stderr
        run_and_time(executable_name, args, stdin)
        # Once student execution is done, stop monitoring to be safe
        monitor.stop_monitoring()
        return monitor.max_vm_usage(), parse_runtime()
    except KeyboardInterrupt:
        # Stop monitoring if user aborts -- by default if user Ctrl+C's
        # it only aborts the main thread -- so we manually stop the
        # monitoring thread
        monitor.stop_monitoring()
        raise AssertionError('aborted by user')
    except UnicodeDecodeError:
        monitor.stop_monitoring()
        raise AssertionError(
            f'{executable_name} produced output that\'s not UTF-8')
    finally:
        check_and_remove(TEMP_TIME_FILE)


def display_results(student, reference):
    print("\n" + " " * 20 + "==== Results ====")
    print(f"Your runtime (hh:mm:ss):\t{prettytime(student[1])}")
    print(f"Reference runtime (hh:mm:ss):\t{prettytime(reference[1])}")
    print(f"Your peak RAM usage (GB):\t{student[0]}")
    print(f"Reference peak RAM usage (GB):\t{reference[0]}")


def main():
    try:
        check_cwd()
        args = get_cmdline_args()
        inform('running your program')
        student = run_and_monitor('gerp', args, '@q')
        inform('running the reference')
        reference = run_and_monitor('the_gerp', args, '@q')
        display_results(student, reference)
    except AssertionError as e:
        inform("aborted: " + str(e) +
               "\nMake sure your program works properly by running it outside of gerp_perf.")


if __name__ == '__main__':
    main()
