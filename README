/*******************************************************************************
* Proj 2: Gerp
* Comp 15 Fall 2023
* README
* Author: Iverson Lai ilai02
*******************************************************************************/

A The title of the homework and the author name
    
    Title: gerp
    Author: Iverson Lai ilai02

B The purpose of the program
    
    The purpose of this program is to create a search functionality that is
    able to parse through all files in a given directory and return a provided
    query. It also takes in a few other commands to allow for some more options
    for those queries.

C Acknowledgements for any help you received, including references to outside
  sources you consulted.
    
    I watched a few YouTube videos on how to implement Hash Tables in C++,
    because I did not have the best understanding of hash tables. I also
    searched the web for some useful hashing functions.

D The files that you provided and a short description of what each file is and 
its purpose.
    
    HashTable.h and HashTable.cpp are implementations for a hash table class
    that offers insert and search functionality. It also is able to resize
    based on a load factor.
    FileManager.h and FileManager.cpp is the class that contains most of the
    workings for this program. It indexes all of the files into the hash table
    when it is constructed. It also is in charge of the command loop and it 
    processes those commands. It also prints to either std::cout or to the
    specified output file. The main thing it does is to index files into the
    hash table and then properly perform searches and print out the desired
    results (though I am having a lot of trouble getting that part working
    correctly).
    stringProcessing.cpp provides a function that strips tokens of any non-
    alphanumeric chars so that it can clean words.
    FSTree.h and DirNode were provided beforehand, but they set up the file 
    system and provide useful functions for getting information on the files 
    and their directories.

E How to compile and run your program
    
    Run the provided Makefile.

F An “architectural overview,” i.e., a description of how your various program
modules relate. For example, the FSTree implementation keeps a pointer to the
root DirNode.
    
    In the main function, it creates an instance of a FileManager class, which
    constructs the file system with the given root directory and indexes those
    files into a hash table. It then begins the command loop with the
    processQueries() function. In that function, it takes in various commands
    from the user and decides where to go from there. When it receives a word
    to search up, it will pull the information from the hash table and print 
    the desired output into a given output file.

G An outline of the data structures and algorithms that you used. Given that 
this is a data structures class, you need to always discuss any data structures
that you used and justify why you used them. For this assignment it is
imperative that you explain your data structures and algorithms in detail, as it
will help us understand your code since there is no single right way of
completing this assignment.
    
    The main data structures I used were hash tables, maps, and linked lists.
    I chose a linked list for the hash table to handle collisions through
    separate chaining. I used maps to store keys with associated values. Both
    of these data structures were used to build the hash table data structure.
    For the linked list and map, I used the standard implementation of list and
    pair. The hash table I made could definitely be improved, but I kept it
    pretty barebones for the program. It only contains the ability to insert
    and search items. There is also a printTables() function for debugging. The 
    hashing function used here is a method called djb2 which I found from a
    website from York University. It is simplified from the implementation shown
    on the website. I don't quite fully understand it, but it seems to be 
    regarded as a quick hash function, which is why I went with it. The hash
    table class I implemented also has a rehash function for resizing if needed.
    I got the load factor of 0.7 from the video lectures and the default size of
    10 is an arbitrary magic number. In the future, I hope to learn more about
    hash tables so that I can build a more efficient or a more robust/modular 
    hash table.

H Details and an explanation of how you tested the various parts of your classes
and the program as a whole. You may reference the testing files that you
submitted to aid in your explanation.

    I wrote various print functions throughout the program to see if files
    were properly being indexed or if the search function was working or if
    files were being correctly inserted into the hash table.

I. Please let us know approximately how many hours you spent working on this
project. This should include both weeks one and two.

    I spent probably about 40-50 hours on this project, most of it planning
    and trying to understand how the classes and modules of the program would
    interact with each other.
